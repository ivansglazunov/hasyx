import { z } from 'zod';

// Export all validation schemas as a single object
export const schema = {
  // Email validation schema
  email: z.object({
    email: z.string().email('Please enter a valid email address'),
  }),
} as const;

// üéØ –°–ò–°–¢–ï–ú–ê –û–ü–¶–ò–ô –ü–û –¢–ê–ë–õ–ò–¶–ê–ú
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞: options.tableName.optionKey
export const options = {
  // –û–ø—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users (item_id = user.id)
  users: z.object({
    fio: z.string().min(1).max(200).optional(),
    displayName: z.string().min(1).max(100).optional(),
    timezone: z.string().min(1).max(50).optional(),
    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª-–∞–≤–∞—Ç–∞—Ä (uuid –∏–∑ storage.files)
    avatar: z
      .string()
      .uuid()
      .describe('User avatar file id (uuid from storage.files)')
      .meta({ widget: 'file-id', tables: ['storage.files'] })
      .optional(),
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–∑–µ–π (uuid –∏–∑ users)
    friend_id: z
      .string()
      .uuid()
      .describe('Friend user id (uuid from public.users)')
      .meta({ multiple: true, tables: ['users'] })
      .optional(),
    notifications: z.object({
      email: z.boolean().optional(),
      push: z.boolean().optional(),
      sms: z.boolean().optional(),
    }).partial().optional(),
  }),
  // –û–ø—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã items (item_id = items.id)
  items: z.object({
    // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–π—Ç–µ–º—É
    user_id: z.string().uuid().meta({ tables: ['users'] }),
    // –ü—Ä–∏–≤—è–∑–∫–∏ –∫ geo.features (–º–∞—Ä–∫–µ—Ä/–º–∞—Ä—à—Ä—É—Ç/–∑–æ–Ω–∞) –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    mark_id: z.string().uuid().meta({ tables: ['geo.features'] }),
    route_id: z.string().uuid().meta({ tables: ['geo.features'] }),
    zone_id: z.string().uuid().meta({ tables: ['geo.features'] }),
  }),
} as const;
