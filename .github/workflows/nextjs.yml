# Sample workflow for building and deploying a Next.js site to GitHub Pages
name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        id: build
        run: ${{ steps.detect-package-manager.outputs.runner }} npm run client
        env:
          TEST_TOKEN: ${{secrets.TEST_TOKEN}}
          NEXT_PUBLIC_HASURA_GRAPHQL_URL: ${{secrets.NEXT_PUBLIC_HASURA_GRAPHQL_URL}}
          HASURA_ADMIN_SECRET: ${{secrets.HASURA_ADMIN_SECRET}}
          HASURA_JWT_SECRET: ${{secrets.HASURA_JWT_SECRET}}
          NEXT_PUBLIC_MAIN_URL: ${{secrets.NEXT_PUBLIC_MAIN_URL}}
          NEXT_PUBLIC_BASE_URL: ${{secrets.NEXT_PUBLIC_BASE_URL}}
          NEXTAUTH_SECRET: ${{secrets.NEXTAUTH_SECRET}}
          GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
          GOOGLE_CLIENT_SECRET: ${{secrets.GOOGLE_CLIENT_SECRET}}
          YANDEX_CLIENT_ID: ${{secrets.YANDEX_CLIENT_ID}}
          YANDEX_CLIENT_SECRET: ${{secrets.YANDEX_CLIENT_SECRET}}
          GITHUB_ID: ${{secrets.GITHUB_ID}}
          GITHUB_SECRET: ${{secrets.GITHUB_SECRET}}
          FACEBOOK_CLIENT_ID: ${{secrets.FACEBOOK_CLIENT_ID}}
          FACEBOOK_CLIENT_SECRET: ${{secrets.FACEBOOK_CLIENT_SECRET}}
          VK_CLIENT_ID: ${{secrets.VK_CLIENT_ID}}
          VK_CLIENT_SECRET: ${{secrets.VK_CLIENT_SECRET}}
          RESEND_API_KEY: ${{secrets.RESEND_API_KEY}}
          NODE_ENV: production
          NEXT_PUBLIC_BUILD_TARGET: client
          NEXT_PUBLIC_BASE_PATH: /${{ github.event.repository.name }}
      - name: Verify Build Output Directory
        run: |
          echo "Listing directory contents:"
          ls -la
          echo "Checking contents of client/_next/static/:":
          ls -la client/_next/static/ || echo "client/_next/static/ not found"
        shell: bash
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  check-pages:
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.check_pages.outputs.enabled }}
    steps:
      - name: Check if GitHub Pages is enabled
        id: check_pages
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pages)
          if [ "$response" = "200" ]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    if: needs.check-pages.outputs.enabled == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, check-pages]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
