name: Create GitHub Release

on:
  workflow_run:
    workflows: ["Build Android APK", "Deploy Next.js site to Pages", "Build and Push Docker Image", "npm-publish"]
    types:
      - completed
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      release_name:
        description: 'Release name'
        required: false
        type: string
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  wait-for-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for other workflows to complete
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            
            console.log(`Waiting for workflows to complete for commit: ${sha}`);
            
            // Define the workflows we want to wait for
            const targetWorkflows = [
              'test', 
              'npm-publish', 
              'Deploy Next.js site to Pages',
              'Build Android APK'
            ];
            
            // If this is triggered by workflow_run, we only need to wait for the remaining workflows
            if (context.eventName === 'workflow_run') {
              const triggeringWorkflow = context.payload.workflow_run.name;
              const remainingWorkflows = targetWorkflows.filter(w => w !== triggeringWorkflow);
              console.log(`Triggered by ${triggeringWorkflow}, waiting for remaining workflows: ${remainingWorkflows.join(', ')}`);
              
              if (remainingWorkflows.length === 0) {
                console.log('No remaining workflows to wait for');
                return;
              }
              
              targetWorkflows.length = 0;
              targetWorkflows.push(...remainingWorkflows);
            }
            
            // Wait up to 30 minutes (1800 seconds)
            const maxWaitTime = 1800;
            const checkInterval = 30;
            let elapsed = 0;
            
            while (elapsed < maxWaitTime) {
              // Get all workflow runs for this commit
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner,
                repo,
                head_sha: sha,
                per_page: 100
              });
              
              // Filter to target workflows
              const targetRuns = workflowRuns.workflow_runs.filter(run => 
                targetWorkflows.includes(run.name) && run.head_sha === sha
              );
              
              console.log(`Found ${targetRuns.length} target workflow runs`);
              
              // Check if all target workflows are complete (regardless of success/failure)
              const incompleteRuns = targetRuns.filter(run => 
                run.status !== 'completed'
              );
              
              if (incompleteRuns.length === 0 && targetRuns.length > 0) {
                console.log('All target workflows completed!');
                break;
              }
              
              console.log(`${incompleteRuns.length} workflows still running. Waiting...`);
              await new Promise(resolve => setTimeout(resolve, checkInterval * 1000));
              elapsed += checkInterval;
            }
            
            if (elapsed >= maxWaitTime) {
              console.log('Timeout reached, proceeding anyway');
            }

  create-release:
    runs-on: ubuntu-latest
    needs: wait-for-workflows
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      packages: read
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.14'
        cache: 'npm'

    - name: Get package info
      id: package
      run: |
        echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
        echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        echo "description=$(node -p "require('./package.json').description")" >> $GITHUB_OUTPUT

    - name: Determine tag and release name
      id: release_info
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          IS_DRAFT="${{ github.event.inputs.draft }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          # Extract tag from package.json for automated releases
          TAG_NAME="${{ steps.package.outputs.version }}"
          RELEASE_NAME="${{ steps.package.outputs.name }} ${{ steps.package.outputs.version }}"
          IS_DRAFT="false"
          IS_PRERELEASE="false"
        fi
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "is_draft=$IS_DRAFT" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT



    - name: Find latest Android build workflow run
      id: find_android_run
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          
          // Find the latest successful Android build workflow run
          const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
            owner,
            repo,
            workflow_id: 'android-build.yml',
            status: 'completed',
            conclusion: 'success',
            per_page: 1
          });
          
          if (workflowRuns.workflow_runs.length > 0) {
            const latestRun = workflowRuns.workflow_runs[0];
            console.log(`Found latest Android build run: ${latestRun.id}`);
            core.setOutput('run_id', latestRun.id);
            core.setOutput('run_url', latestRun.html_url);
          } else {
            core.setOutput('run_id', '');
            core.setOutput('run_url', '');
          }

    - name: Download Android APK artifact
      id: download_apk
      if: steps.find_android_run.outputs.run_id != ''
      uses: actions/download-artifact@v4
      with:
        name: android-apk-debug
        path: ./artifacts
        # Download from the latest successful Android build workflow run
        run-id: ${{ steps.find_android_run.outputs.run_id }}

    - name: Check APK artifact
      id: check_apk
      run: |
        # Ð˜Ñ‰ÐµÐ¼ APK Ñ„Ð°Ð¹Ð» Ð² artifacts Ð´Ð¸Ñ€ÐµÐºÑ‚Ð¾Ñ€Ð¸Ð¸
        APK_FILE=$(find ./artifacts -name "*.apk" -type f | head -1)
        if [ -n "$APK_FILE" ]; then
          echo "apk_found=true" >> $GITHUB_OUTPUT
          echo "apk_size=$(du -h "$APK_FILE" | cut -f1)" >> $GITHUB_OUTPUT
          echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
        else
          echo "apk_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Generate release notes
      id: release_notes
      run: |
        NOTES="# Release Notes for ${{ steps.release_info.outputs.release_name }}\n\n"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          NOTES+="## Manual Release\n\n"
          NOTES+="This release was created manually.\n\n"
        else
          NOTES+="## Automated Release\n\n"
          NOTES+="This release was created automatically from workflow: **${{ github.event.workflow_run.name }}**\n\n"
        fi
        
        NOTES+="## Build Information\n\n"
        NOTES+="- **Version**: ${{ steps.package.outputs.version }}\n"
        NOTES+="- **Package**: ${{ steps.package.outputs.name }}\n"
        NOTES+="- **Commit**: \`${{ github.sha }}\`\n"
        NOTES+="- **Branch**: \`${{ github.ref_name }}\`\n"
        NOTES+="- **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")\n\n"
        
        if [ "${{ steps.check_apk.outputs.apk_found }}" = "true" ]; then
          NOTES+="## ðŸ“± Android APK\n\n"
          NOTES+="- **APK Size**: ${{ steps.check_apk.outputs.apk_size }}\n"
          NOTES+="- **Build Type**: Debug\n"
          NOTES+="- **Download**: Available below\n\n"
        fi
        
        NOTES+="## ðŸ”— Related Links\n\n"
        NOTES+="- **GitHub Pages**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}\n"
        NOTES+="- **Docker Hub**: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ steps.package.outputs.name }}\n"
        NOTES+="- **npm Package**: https://www.npmjs.com/package/${{ steps.package.outputs.name }}\n\n"
        
        NOTES+="## ðŸ“‹ Changelog\n\n"
        NOTES+="See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.\n\n"
        
        NOTES+="---\n\n"
        NOTES+="*This release was created automatically by GitHub Actions.*\n"
        
        echo "$NOTES" > release_notes.md
        echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        release_name: ${{ steps.release_info.outputs.release_name }}
        body_path: ${{ steps.release_notes.outputs.notes_file }}
        draft: ${{ steps.release_info.outputs.is_draft }}
        prerelease: ${{ steps.release_info.outputs.is_prerelease }}

    - name: Upload APK to Release
      if: steps.check_apk.outputs.apk_found == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.check_apk.outputs.apk_path }}
        asset_name: ${{ steps.package.outputs.name }}-${{ steps.package.outputs.version }}-android.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Generate release summary
      run: |
        echo "ðŸŽ‰ Release Created Successfully!"
        echo "Tag: ${{ steps.release_info.outputs.tag_name }}"
        echo "Name: ${{ steps.release_info.outputs.release_name }}"
        echo "URL: ${{ steps.create_release.outputs.html_url }}"
        echo "Draft: ${{ steps.release_info.outputs.is_draft }}"
        echo "Prerelease: ${{ steps.release_info.outputs.is_prerelease }}"
        
        if [ "${{ steps.check_apk.outputs.apk_found }}" = "true" ]; then
          echo "APK: Uploaded (${{ steps.check_apk.outputs.apk_size }})"
        else
          echo "APK: Not found"
        fi


