name: Build and Release

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string
      release_name:
        description: 'Release name'
        required: false
        type: string
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  npm-publish:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-nextjs:
    runs-on: ubuntu-latest
    needs: [test, npm-publish]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Clear Next.js cache
        run: |
          echo "Clearing Next.js cache for deployment..."
          rm -rf .next || true

      - name: Build Next.js site
        run: npm run build
        env:
          TEST_TOKEN: ${{secrets.TEST_TOKEN}}
          NEXT_PUBLIC_HASURA_GRAPHQL_URL: ${{secrets.NEXT_PUBLIC_HASURA_GRAPHQL_URL}}
          HASURA_ADMIN_SECRET: ${{secrets.HASURA_ADMIN_SECRET}}
          HASURA_JWT_SECRET: ${{secrets.HASURA_JWT_SECRET}}
          NEXT_PUBLIC_MAIN_URL: ${{secrets.NEXT_PUBLIC_MAIN_URL}}
          NEXT_PUBLIC_BASE_URL: ${{secrets.NEXT_PUBLIC_BASE_URL}}
          NEXT_PUBLIC_LOCALE: en
          NEXTAUTH_SECRET: ${{secrets.NEXTAUTH_SECRET}}
          GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
          GOOGLE_CLIENT_SECRET: ${{secrets.GOOGLE_CLIENT_SECRET}}
          YANDEX_CLIENT_ID: ${{secrets.YANDEX_CLIENT_ID}}
          YANDEX_CLIENT_SECRET: ${{secrets.YANDEX_CLIENT_SECRET}}
          GITHUB_ID: ${{secrets.GITHUB_ID}}
          GITHUB_SECRET: ${{secrets.GITHUB_SECRET}}
          FACEBOOK_CLIENT_ID: ${{secrets.FACEBOOK_CLIENT_ID}}
          FACEBOOK_CLIENT_SECRET: ${{secrets.FACEBOOK_CLIENT_SECRET}}
          VK_CLIENT_ID: ${{secrets.VK_CLIENT_ID}}
          VK_CLIENT_SECRET: ${{secrets.VK_CLIENT_SECRET}}
          RESEND_API_KEY: ${{secrets.RESEND_API_KEY}}
          NODE_ENV: production
          NEXT_PUBLIC_BUILD_TARGET: pages
          NEXT_PUBLIC_BASE_PATH: /${{ github.event.repository.name }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, npm-publish]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}

  android-build:
    runs-on: ubuntu-latest
    needs: [test, npm-publish, deploy-nextjs]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install dependencies
        run: npm ci

      - name: Clear Next.js cache
        run: |
          echo "Clearing Next.js cache for Android build..."
          rm -rf .next || true

      - name: Build client for Android
        run: npm run client
        env:
          TEST_TOKEN: ${{secrets.TEST_TOKEN}}
          NEXT_PUBLIC_HASURA_GRAPHQL_URL: ${{secrets.NEXT_PUBLIC_HASURA_GRAPHQL_URL}}
          HASURA_ADMIN_SECRET: ${{secrets.HASURA_ADMIN_SECRET}}
          HASURA_JWT_SECRET: ${{secrets.HASURA_JWT_SECRET}}
          NEXT_PUBLIC_MAIN_URL: ${{secrets.NEXT_PUBLIC_MAIN_URL}}
          NEXT_PUBLIC_BASE_URL: ${{secrets.NEXT_PUBLIC_BASE_URL}}
          NEXT_PUBLIC_LOCALE: en
          NEXTAUTH_SECRET: ${{secrets.NEXTAUTH_SECRET}}
          GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
          GOOGLE_CLIENT_SECRET: ${{secrets.GOOGLE_CLIENT_SECRET}}
          YANDEX_CLIENT_ID: ${{secrets.YANDEX_CLIENT_ID}}
          YANDEX_CLIENT_SECRET: ${{secrets.YANDEX_CLIENT_SECRET}}
          GITHUB_ID: ${{secrets.GITHUB_ID}}
          GITHUB_SECRET: ${{secrets.GITHUB_SECRET}}
          FACEBOOK_CLIENT_ID: ${{secrets.FACEBOOK_CLIENT_ID}}
          FACEBOOK_CLIENT_SECRET: ${{secrets.FACEBOOK_CLIENT_SECRET}}
          VK_CLIENT_ID: ${{secrets.VK_CLIENT_ID}}
          VK_CLIENT_SECRET: ${{secrets.VK_CLIENT_SECRET}}
          RESEND_API_KEY: ${{secrets.RESEND_API_KEY}}
          NODE_ENV: production
          NEXT_PUBLIC_BUILD_TARGET: client
          NEXT_PUBLIC_BASE_PATH: /${{ github.event.repository.name }}

      - name: Generate Android assets
        run: npm run cli -- assets

      - name: Sync with Android project
        run: npx cap sync android

      - name: Build with Gradle
        run: |
          cd android
          ./gradlew assembleDebug --no-daemon --stacktrace
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

      - name: Find APK files
        id: find_apk
        run: |
          cd android
          APK_PATH=$(find . -name "*debug*.apk" -type f | head -1)
          APK_NAME="app-debug.apk"
          
          if [ -n "$APK_PATH" ]; then
            # Remove the leading './' from the path to avoid GitHub Actions path issues
            CLEAN_PATH=$(echo "$APK_PATH" | sed 's|^\./||')
            echo "apk_path=$CLEAN_PATH" >> $GITHUB_OUTPUT
            echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
            echo "apk_size=$(du -h "$APK_PATH" | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "❌ No APK found!"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: android/${{ steps.find_apk.outputs.apk_path }}
          retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [test, npm-publish, deploy-nextjs, docker-build, android-build]
    if: success()
    permissions:
      contents: write
      packages: read
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14'
          cache: 'npm'

      - name: Get package info
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "description=$(node -p "require('./package.json').description")" >> $GITHUB_OUTPUT

      - name: Determine tag and release name
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag_name }}" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
            RELEASE_NAME="${{ github.event.inputs.release_name || github.event.inputs.tag_name }}"
            IS_DRAFT="${{ github.event.inputs.draft }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            # Extract tag from package.json for automated releases
            TAG_NAME="${{ steps.package.outputs.version }}"
            RELEASE_NAME="${{ steps.package.outputs.name }} ${{ steps.package.outputs.version }}"
            IS_DRAFT="false"
            IS_PRERELEASE="false"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "is_draft=$IS_DRAFT" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Download Android APK artifact
        id: download_apk
        uses: actions/download-artifact@v4
        with:
          name: android-apk-debug
          path: ./artifacts

      - name: Check APK artifact
        id: check_apk
        run: |
          # Look for APK file in artifacts directory
          APK_FILE=$(find ./artifacts -name "*.apk" -type f | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "apk_found=true" >> $GITHUB_OUTPUT
            echo "apk_size=$(du -h "$APK_FILE" | cut -f1)" >> $GITHUB_OUTPUT
            echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
          else
            echo "apk_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          NOTES="# Release Notes for ${{ steps.release_info.outputs.release_name }}\n\n"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            NOTES+="## Manual Release\n\n"
            NOTES+="This release was created manually.\n\n"
          else
            NOTES+="## Automated Release\n\n"
            NOTES+="This release was created automatically from push to main/master.\n\n"
          fi
          
          NOTES+="## Build Information\n\n"
          NOTES+="- **Version**: ${{ steps.package.outputs.version }}\n"
          NOTES+="- **Package**: ${{ steps.package.outputs.name }}\n"
          NOTES+="- **Commit**: \`${{ github.sha }}\`\n"
          NOTES+="- **Branch**: \`${{ github.ref_name }}\`\n"
          NOTES+="- **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")\n\n"
          
          if [ "${{ steps.check_apk.outputs.apk_found }}" = "true" ]; then
            NOTES+="## 📱 Android APK\n\n"
            NOTES+="- **APK Size**: ${{ steps.check_apk.outputs.apk_size }}\n"
            NOTES+="- **Build Type**: Debug\n"
            NOTES+="- **Download**: Available below\n\n"
          fi
          
          NOTES+="## 🔗 Related Links\n\n"
          NOTES+="- **GitHub Pages**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}\n"
          NOTES+="- **Docker Hub**: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ steps.package.outputs.name }}\n"
          NOTES+="- **npm Package**: https://www.npmjs.com/package/${{ steps.package.outputs.name }}\n\n"
          
          NOTES+="## 📋 Changelog\n\n"
          NOTES+="See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.\n\n"
          
          NOTES+="---\n\n"
          NOTES+="*This release was created automatically by GitHub Actions.*\n"
          
          echo "$NOTES" > release_notes.md
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          release_name: ${{ steps.release_info.outputs.release_name }}
          body_path: ${{ steps.release_notes.outputs.notes_file }}
          draft: ${{ steps.release_info.outputs.is_draft }}
          prerelease: ${{ steps.release_info.outputs.is_prerelease }}

      - name: Upload APK to Release
        if: steps.check_apk.outputs.apk_found == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.check_apk.outputs.apk_path }}
          asset_name: ${{ steps.package.outputs.name }}-${{ steps.package.outputs.version }}-android.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Generate release summary
        run: |
          echo "🎉 Release Created Successfully!"
          echo "Tag: ${{ steps.release_info.outputs.tag_name }}"
          echo "Name: ${{ steps.release_info.outputs.release_name }}"
          echo "URL: ${{ steps.create_release.outputs.html_url }}"
          echo "Draft: ${{ steps.release_info.outputs.is_draft }}"
          echo "Prerelease: ${{ steps.release_info.outputs.is_prerelease }}"
          
          if [ "${{ steps.check_apk.outputs.apk_found }}" = "true" ]; then
            echo "APK: Uploaded (${{ steps.check_apk.outputs.apk_size }})"
          else
            echo "APK: Not found"
          fi

  telegram-notification:
    runs-on: ubuntu-latest
    needs: [test, npm-publish, deploy-nextjs, docker-build, android-build, create-release]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14'

      - name: Install dependencies
        run: npm ci

      - name: Send Telegram Notification
        run: npx tsx lib/github-telegram-bot.ts
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          HASYX_GITHUB_TELEGRAM_BOT: ${{ secrets.HASYX_GITHUB_TELEGRAM_BOT || '1' }}
