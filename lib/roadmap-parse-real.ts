#!/usr/bin/env tsx

import * as fs from 'fs';
import * as path from 'path';

interface Roadstep {
  symbol: string;
  name: string;
  required?: string[];
  available?: string[];
}

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ /*üòà{...}*/
const ROADMAP_REGEX = /\/\*üòà(\{[\s\S]*?\})\*\//g;

// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const SCAN_EXTENSIONS = ['.ts', '.tsx', '.js', '.jsx'];

// –ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const EXCLUDE_DIRS = ['node_modules', '.git', '.next', 'dist', 'build', '.vercel'];

function parseRoadstepJson(jsonStr: string): Roadstep | null {
  try {
    const parsed = JSON.parse(jsonStr);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!parsed.symbol || !parsed.name) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è symbol –∏–ª–∏ name');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–º–≤–æ–ª–∞
    const validSymbols = ['üü¢', 'üü°', 'üü†', 'üî¥', '‚ö™'];
    if (!validSymbols.includes(parsed.symbol)) {
      console.warn(`‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: ${parsed.symbol}`);
    }
    
    return {
      symbol: parsed.symbol,
      name: parsed.name,
      required: Array.isArray(parsed.required) ? parsed.required : undefined,
      available: Array.isArray(parsed.available) ? parsed.available : undefined,
    };
  } catch (error: any) {
    throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${error.message}`);
  }
}

function shouldScanFile(filePath: string): boolean {
  const ext = path.extname(filePath);
  return SCAN_EXTENSIONS.includes(ext);
}

function shouldScanDirectory(dirName: string): boolean {
  return !EXCLUDE_DIRS.includes(dirName) && !dirName.startsWith('.');
}

function scanDirectory(dirPath: string): string[] {
  const files: string[] = [];
  
  try {
    const entries = fs.readdirSync(dirPath, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);
      
      if (entry.isDirectory()) {
        if (shouldScanDirectory(entry.name)) {
          files.push(...scanDirectory(fullPath));
        }
      } else if (entry.isFile()) {
        if (shouldScanFile(fullPath)) {
          files.push(fullPath);
        }
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}: ${error}`);
  }
  
  return files;
}

function parseRealFiles(rootDir: string = '.'): Roadstep[] {
  const roadsteps: Roadstep[] = [];
  
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const files = scanDirectory(rootDir);
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
  
  let scannedFiles = 0;
  let filesWithRoadsteps = 0;
  
  for (const filePath of files) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      scannedFiles++;
      
      const matches = Array.from(content.matchAll(ROADMAP_REGEX));
      
      if (matches.length > 0) {
        filesWithRoadsteps++;
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${matches.length} roadstep(s) –≤ ${filePath}`);
        
        for (const match of matches) {
          try {
            // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            const jsonStr = match[1];
            console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: "${jsonStr.substring(0, 80)}${jsonStr.length > 80 ? '...' : ''}"`);
            const roadstep = parseRoadstepJson(jsonStr);
            
            if (roadstep) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
              const existing = roadsteps.find(r => r.name === roadstep.name);
              if (existing) {
                console.warn(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç roadstep '${roadstep.name}' –≤ ${filePath}`);
              } else {
                roadsteps.push(roadstep);
                console.log(`  ‚úÖ ${roadstep.symbol} ${roadstep.name}`);
              }
            }
          } catch (error: any) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ roadstep –≤ ${filePath}: ${match[0]}`);
            console.error(`   ${error.message}`);
          }
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${filePath}: ${error}`);
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  roadsteps.sort((a, b) => a.name.localeCompare(b.name));
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${scannedFiles}`);
  console.log(`   –§–∞–π–ª–æ–≤ —Å roadstep'–∞–º–∏: ${filesWithRoadsteps}`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ roadstep'–æ–≤: ${roadsteps.length}`);
  
  return roadsteps;
}

function printReport(roadsteps: Roadstep[]): void {
  console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:');
  console.log('='.repeat(50));
  
  const groupedBySymbol = roadsteps.reduce((acc, step) => {
    if (!acc[step.symbol]) acc[step.symbol] = [];
    acc[step.symbol].push(step);
    return acc;
  }, {} as Record<string, Roadstep[]>);
  
  Object.entries(groupedBySymbol).forEach(([symbol, steps]) => {
    console.log(`\n${symbol} (${steps.length}):`);
    steps.forEach(step => {
      console.log(`  ‚Ä¢ ${step.name}`);
      if (step.required?.length) {
        console.log(`    –¢—Ä–µ–±—É–µ—Ç: ${step.required.join(', ')}`);
      }
      if (step.available?.length) {
        console.log(`    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${step.available.join(', ')}`);
      }
    });
  });
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = roadsteps.reduce((acc, step) => {
    acc[step.symbol] = (acc[step.symbol] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:');
  Object.entries(stats).forEach(([symbol, count]) => {
    console.log(`   ${symbol} ${count}`);
  });
}

function writeRoadmapJson(roadsteps: Roadstep[], outputPath: string = 'lib/roadmap.json'): void {
  try {
    const jsonContent = JSON.stringify(roadsteps, null, 2);
    fs.writeFileSync(outputPath, jsonContent, 'utf-8');
    console.log(`\nüíæ Roadmap —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${outputPath}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${outputPath}: ${error}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  try {
    const roadsteps = parseRealFiles();
    printReport(roadsteps);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º JSON –≤ —Ñ–∞–π–ª
    writeRoadmapJson(roadsteps);
    
    // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º JSON –≤ –∫–æ–Ω—Å–æ–ª—å
    const jsonContent = JSON.stringify(roadsteps, null, 2);
    console.log('\nüíæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π roadmap.json:');
    console.log(jsonContent);
    
    console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    return roadsteps;
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    return [];
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (typeof require !== 'undefined' && require.main === module) {
  main();
}

export { parseRealFiles, printReport, main, writeRoadmapJson, type Roadstep };