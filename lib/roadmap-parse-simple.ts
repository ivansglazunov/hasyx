#!/usr/bin/env tsx

interface Roadstep {
  symbol: string;
  name: string;
  required?: string[];
  available?: string[];
}

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ /*üòà{...}*/
const ROADMAP_REGEX = /\/\*üòà(\{[\s\S]*?\})\*\//g;

// –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testFiles = [
  {
    path: 'lib/pwa.ts',
    content: `/*üòà{"symbol":"üü†","name":"PWA","required":["server-client"],"available":["notifications","install-prompt","offline-support"]}*/`
  },
  {
    path: 'lib/apollo.tsx', 
    content: `/*üòà{"symbol":"üü¢","name":"apollo","required":["class-hasura"],"available":["lib","graphql-subscriptions"]}*/`
  },
  {
    path: 'lib/hasura.ts',
    content: `/*üòà{"symbol":"üü¢","name":"class-hasura","required":["lib"],"available":["migrations","apollo","graphql-proxy"]}*/`
  },
  {
    path: 'lib/generator.ts',
    content: `/*üòà{"symbol":"üü¢","name":"generator-hasyx","required":["class-hasura"],"available":["lib","graphql-generation"]}*/`
  },
  {
    path: 'lib/next-auth-options.ts',
    content: `/*üòà{"symbol":"üü¢","name":"next-auth","required":[],"available":["google-auth","yandex-auth","vk-auth","telegram-auth","telegram-miniapp-auth"]}*/`
  },
  {
    path: 'lib/telegram-miniapp.tsx',
    content: `/*üòà{"symbol":"üü†","name":"telegram-miniapp-auth","required":["next-auth"],"available":["telegram-auth"]}*/`
  },
  {
    path: 'app/page.tsx',
    content: `/*üòà{"symbol":"üü¢","name":"nextjs","required":[],"available":["cli","server-client","client"]}*/`
  }
];

function parseRoadstepJson(jsonStr: string): Roadstep | null {
  try {
    const parsed = JSON.parse(jsonStr);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!parsed.symbol || !parsed.name) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è symbol –∏–ª–∏ name');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–º–≤–æ–ª–∞
    const validSymbols = ['üü¢', 'üü°', 'üü†', 'üî¥', '‚ö™'];
    if (!validSymbols.includes(parsed.symbol)) {
      console.warn(`‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: ${parsed.symbol}`);
    }
    
    return {
      symbol: parsed.symbol,
      name: parsed.name,
      required: Array.isArray(parsed.required) ? parsed.required : undefined,
      available: Array.isArray(parsed.available) ? parsed.available : undefined,
    };
  } catch (error: any) {
    throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${error.message}`);
  }
}

function parseTestFiles(): Roadstep[] {
  const roadsteps: Roadstep[] = [];
  
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  for (const file of testFiles) {
    const matches = Array.from(file.content.matchAll(ROADMAP_REGEX));
    
    if (matches.length > 0) {
      console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${matches.length} roadstep(s) –≤ ${file.path}`);
      
      for (const match of matches) {
        try {
          // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
          const jsonStr = match[1];
          console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: "${jsonStr}"`);
          const roadstep = parseRoadstepJson(jsonStr);
          
          if (roadstep) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            const existing = roadsteps.find(r => r.name === roadstep.name);
            if (existing) {
              console.warn(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç roadstep '${roadstep.name}' –≤ ${file.path}`);
            } else {
              roadsteps.push(roadstep);
              console.log(`  ‚úÖ ${roadstep.symbol} ${roadstep.name}`);
            }
          }
        } catch (error: any) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ roadstep –≤ ${file.path}: ${match[0]}`);
          console.error(`   ${error.message}`);
        }
      }
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  roadsteps.sort((a, b) => a.name.localeCompare(b.name));
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ roadstep'–æ–≤: ${roadsteps.length}`);
  
  return roadsteps;
}

function printReport(roadsteps: Roadstep[]): void {
  console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:');
  console.log('='.repeat(50));
  
  const groupedBySymbol = roadsteps.reduce((acc, step) => {
    if (!acc[step.symbol]) acc[step.symbol] = [];
    acc[step.symbol].push(step);
    return acc;
  }, {} as Record<string, Roadstep[]>);
  
  Object.entries(groupedBySymbol).forEach(([symbol, steps]) => {
    console.log(`\n${symbol} (${steps.length}):`);
    steps.forEach(step => {
      console.log(`  ‚Ä¢ ${step.name}`);
      if (step.required?.length) {
        console.log(`    –¢—Ä–µ–±—É–µ—Ç: ${step.required.join(', ')}`);
      }
      if (step.available?.length) {
        console.log(`    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${step.available.join(', ')}`);
      }
    });
  });
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = roadsteps.reduce((acc, step) => {
    acc[step.symbol] = (acc[step.symbol] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:');
  Object.entries(stats).forEach(([symbol, count]) => {
    console.log(`   ${symbol} ${count}`);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  try {
    const roadsteps = parseTestFiles();
    printReport(roadsteps);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON
    const jsonContent = JSON.stringify(roadsteps, null, 2);
    console.log('\nüíæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π roadmap.json:');
    console.log(jsonContent);
    
    console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    return roadsteps;
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    return [];
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (typeof require !== 'undefined' && require.main === module) {
  main();
}

export { parseTestFiles, printReport, main, type Roadstep };